/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.mapper.models.GeographicPoint3DMessage', null, global);
goog.exportSymbol('proto.mapper.models.SpatialReferenceSystemIdentifier', null, global);
goog.exportSymbol('proto.mapper.models.SpatialTileIndexMessage', null, global);
goog.exportSymbol('proto.mapper.models.SpatialTileScale', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mapper.models.SpatialTileIndexMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mapper.models.SpatialTileIndexMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mapper.models.SpatialTileIndexMessage.displayName = 'proto.mapper.models.SpatialTileIndexMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mapper.models.SpatialTileIndexMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.mapper.models.SpatialTileIndexMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mapper.models.SpatialTileIndexMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mapper.models.SpatialTileIndexMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    srid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scale: jspb.Message.getFieldWithDefault(msg, 2, 0),
    xIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    yIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    zIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    spatialReferenceUpdated: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mapper.models.SpatialTileIndexMessage}
 */
proto.mapper.models.SpatialTileIndexMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mapper.models.SpatialTileIndexMessage;
  return proto.mapper.models.SpatialTileIndexMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mapper.models.SpatialTileIndexMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mapper.models.SpatialTileIndexMessage}
 */
proto.mapper.models.SpatialTileIndexMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mapper.models.SpatialReferenceSystemIdentifier} */ (reader.readEnum());
      msg.setSrid(value);
      break;
    case 2:
      var value = /** @type {!proto.mapper.models.SpatialTileScale} */ (reader.readEnum());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setXIndex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setYIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setZIndex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpatialReferenceUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mapper.models.SpatialTileIndexMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mapper.models.SpatialTileIndexMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mapper.models.SpatialTileIndexMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mapper.models.SpatialTileIndexMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getScale();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getXIndex();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = message.getYIndex();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getZIndex();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getSpatialReferenceUpdated();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional SpatialReferenceSystemIdentifier srid = 1;
 * @return {!proto.mapper.models.SpatialReferenceSystemIdentifier}
 */
proto.mapper.models.SpatialTileIndexMessage.prototype.getSrid = function() {
  return /** @type {!proto.mapper.models.SpatialReferenceSystemIdentifier} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.mapper.models.SpatialReferenceSystemIdentifier} value */
proto.mapper.models.SpatialTileIndexMessage.prototype.setSrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SpatialTileScale scale = 2;
 * @return {!proto.mapper.models.SpatialTileScale}
 */
proto.mapper.models.SpatialTileIndexMessage.prototype.getScale = function() {
  return /** @type {!proto.mapper.models.SpatialTileScale} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.mapper.models.SpatialTileScale} value */
proto.mapper.models.SpatialTileIndexMessage.prototype.setScale = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional sint32 x_index = 3;
 * @return {number}
 */
proto.mapper.models.SpatialTileIndexMessage.prototype.getXIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.mapper.models.SpatialTileIndexMessage.prototype.setXIndex = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional sint32 y_index = 4;
 * @return {number}
 */
proto.mapper.models.SpatialTileIndexMessage.prototype.getYIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.mapper.models.SpatialTileIndexMessage.prototype.setYIndex = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional sint32 z_index = 5;
 * @return {number}
 */
proto.mapper.models.SpatialTileIndexMessage.prototype.getZIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.mapper.models.SpatialTileIndexMessage.prototype.setZIndex = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 spatial_reference_updated = 6;
 * @return {number}
 */
proto.mapper.models.SpatialTileIndexMessage.prototype.getSpatialReferenceUpdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.mapper.models.SpatialTileIndexMessage.prototype.setSpatialReferenceUpdated = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mapper.models.GeographicPoint3DMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mapper.models.GeographicPoint3DMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mapper.models.GeographicPoint3DMessage.displayName = 'proto.mapper.models.GeographicPoint3DMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mapper.models.GeographicPoint3DMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.mapper.models.GeographicPoint3DMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mapper.models.GeographicPoint3DMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mapper.models.GeographicPoint3DMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    srid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    z: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mapper.models.GeographicPoint3DMessage}
 */
proto.mapper.models.GeographicPoint3DMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mapper.models.GeographicPoint3DMessage;
  return proto.mapper.models.GeographicPoint3DMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mapper.models.GeographicPoint3DMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mapper.models.GeographicPoint3DMessage}
 */
proto.mapper.models.GeographicPoint3DMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mapper.models.SpatialReferenceSystemIdentifier} */ (reader.readEnum());
      msg.setSrid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mapper.models.GeographicPoint3DMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mapper.models.GeographicPoint3DMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mapper.models.GeographicPoint3DMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mapper.models.GeographicPoint3DMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional SpatialReferenceSystemIdentifier srid = 1;
 * @return {!proto.mapper.models.SpatialReferenceSystemIdentifier}
 */
proto.mapper.models.GeographicPoint3DMessage.prototype.getSrid = function() {
  return /** @type {!proto.mapper.models.SpatialReferenceSystemIdentifier} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.mapper.models.SpatialReferenceSystemIdentifier} value */
proto.mapper.models.GeographicPoint3DMessage.prototype.setSrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double x = 2;
 * @return {number}
 */
proto.mapper.models.GeographicPoint3DMessage.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.mapper.models.GeographicPoint3DMessage.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double y = 3;
 * @return {number}
 */
proto.mapper.models.GeographicPoint3DMessage.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.mapper.models.GeographicPoint3DMessage.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double z = 4;
 * @return {number}
 */
proto.mapper.models.GeographicPoint3DMessage.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.mapper.models.GeographicPoint3DMessage.prototype.setZ = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.mapper.models.SpatialReferenceSystemIdentifier = {
  UNKNOWN_SRID: 0,
  LOCAL_CAMERA: 1,
  LOCAL_INERTIAL: 2,
  ECEF: 3,
  LAT_LNG: 4,
  LAT_LNG_ALT: 5,
  UTM_1N: 6,
  UTM_2N: 7,
  UTM_3N: 8,
  UTM_4N: 9,
  UTM_5N: 10,
  UTM_6N: 11,
  UTM_7N: 12,
  UTM_8N: 13,
  UTM_9N: 14,
  UTM_10N: 15,
  UTM_11N: 16,
  UTM_12N: 17,
  UTM_13N: 18,
  UTM_14N: 19,
  UTM_15N: 20,
  UTM_16N: 21,
  UTM_17N: 22,
  UTM_18N: 23,
  UTM_19N: 24,
  UTM_20N: 25,
  UTM_21N: 26,
  UTM_22N: 27,
  UTM_23N: 28,
  UTM_24N: 29,
  UTM_25N: 30,
  UTM_26N: 31,
  UTM_27N: 32,
  UTM_28N: 33,
  UTM_29N: 34,
  UTM_30N: 35,
  UTM_31N: 36,
  UTM_32N: 37,
  UTM_33N: 38,
  UTM_34N: 39,
  UTM_35N: 40,
  UTM_36N: 41,
  UTM_37N: 42,
  UTM_38N: 43,
  UTM_39N: 44,
  UTM_40N: 45,
  UTM_41N: 46,
  UTM_42N: 47,
  UTM_43N: 48,
  UTM_44N: 49,
  UTM_45N: 50,
  UTM_46N: 51,
  UTM_47N: 52,
  UTM_48N: 53,
  UTM_49N: 54,
  UTM_50N: 55,
  UTM_51N: 56,
  UTM_52N: 57,
  UTM_53N: 58,
  UTM_54N: 59,
  UTM_55N: 60,
  UTM_56N: 61,
  UTM_57N: 62,
  UTM_58N: 63,
  UTM_59N: 64,
  UTM_60N: 65,
  UTM_1S: 66,
  UTM_2S: 67,
  UTM_3S: 68,
  UTM_4S: 69,
  UTM_5S: 70,
  UTM_6S: 71,
  UTM_7S: 72,
  UTM_8S: 73,
  UTM_9S: 74,
  UTM_10S: 75,
  UTM_11S: 76,
  UTM_12S: 77,
  UTM_13S: 78,
  UTM_14S: 79,
  UTM_15S: 80,
  UTM_16S: 81,
  UTM_17S: 82,
  UTM_18S: 83,
  UTM_19S: 84,
  UTM_20S: 85,
  UTM_21S: 86,
  UTM_22S: 87,
  UTM_23S: 88,
  UTM_24S: 89,
  UTM_25S: 90,
  UTM_26S: 91,
  UTM_27S: 92,
  UTM_28S: 93,
  UTM_29S: 94,
  UTM_30S: 95,
  UTM_31S: 96,
  UTM_32S: 97,
  UTM_33S: 98,
  UTM_34S: 99,
  UTM_35S: 100,
  UTM_36S: 101,
  UTM_37S: 102,
  UTM_38S: 103,
  UTM_39S: 104,
  UTM_40S: 105,
  UTM_41S: 106,
  UTM_42S: 107,
  UTM_43S: 108,
  UTM_44S: 109,
  UTM_45S: 110,
  UTM_46S: 111,
  UTM_47S: 112,
  UTM_48S: 113,
  UTM_49S: 114,
  UTM_50S: 115,
  UTM_51S: 116,
  UTM_52S: 117,
  UTM_53S: 118,
  UTM_54S: 119,
  UTM_55S: 120,
  UTM_56S: 121,
  UTM_57S: 122,
  UTM_58S: 123,
  UTM_59S: 124,
  UTM_60S: 125
};

/**
 * @enum {number}
 */
proto.mapper.models.SpatialTileScale = {
  _010_010_010: 0
};

goog.object.extend(exports, proto.mapper.models);
