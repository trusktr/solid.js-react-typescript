/**
 *  Copyright 2018 Mapper Inc.
 *  CONFIDENTIAL. AUTHORIZED USE ONLY. DO NOT REDISTRIBUTE.
 */

import * as React from 'react'
import {FillHeight, FillWidth, PositionAbsolute /*, makeFontWithDefaultWeights*/} from '@mapperai/mapper-themes'
import {SessionPicker, SessionPickerHeight, ISessionInfo, AnnotationManager} from '@mapperai/mapper-annotated-scene'
import {DataProviderFactory} from '@mapperai/mapper-annotated-scene/dist/modules/tiles/DataProvider'
import {makeSaffronDataProviderFactory} from './SaffronDataProviderFactory'
import Annotator from '../annotator/Annotator'
import {createStyles, withStyles, WithStyles, Theme} from '@material-ui/core'
// import {CSSProperties} from '@material-ui/core/styles/withStyles'
import {ActivityTracker} from './ActivityTracker'
import getLogger from '../util/Logger'

const log = getLogger(__filename)

interface IActivityTrackingInfo {
  numberOfAnnotations: number
}

export interface AppProps extends WithStyles<typeof styles> {}

export interface AppState {
  dataProviderFactories: Array<DataProviderFactory>
  dataProviderFactory: DataProviderFactory | null
  session: ISessionInfo | null
  env: string
  reset: boolean
  isSaffron: boolean
  annotationManager: AnnotationManager | null
}

class App extends React.Component<AppProps, AppState> {
  private static async createDataProviderFactory(sessionId: string | null = null): Promise<DataProviderFactory> {
    return await makeSaffronDataProviderFactory(sessionId, false)
  }

  private activityTracker?: ActivityTracker<IActivityTrackingInfo>

  constructor(props: AppProps) {
    super(props)

    // noinspection PointlessBooleanExpressionJS
    this.state = {
      dataProviderFactories: [],
      dataProviderFactory: null,
      session: null,
      env: 'prod',
      reset: false,
      isSaffron: window.isSaffron === true,
      annotationManager: null,
    }

    ~(async () => {
      this.setState({
        dataProviderFactories: [await App.createDataProviderFactory()],
      })
    })()
  }

  /**
   * Update session
   */
  private onSessionSelected = (factory: DataProviderFactory, session: ISessionInfo) => {
    log.info(`loading session ${session.id}`)
    this.setState({
      session,
      dataProviderFactory: factory.forSessionId(session.id),
      reset: true,
    })
  }

  private getAnnotationManagerRef = (annotationManager: AnnotationManager | null) => {
    this.setState({annotationManager})
  }

  onTrackActivity = (): IActivityTrackingInfo | false => {
    const annotationManager = this.state.annotationManager

    if (!annotationManager) return false

    return {
      numberOfAnnotations: annotationManager.allAnnotations.length,
    }
  }

  componentDidUpdate(_prevProps: Readonly<AppProps>, prevState: Readonly<AppState>, _snapshot?: any): void {
    if (this.state.reset) {
      this.setState({reset: false})
    }

    if (this.state.session !== prevState.session) {
      this.activityTracker && this.activityTracker.stop()
      delete this.activityTracker

      if (this.state.session && this.state.session.id) {
        this.activityTracker = new ActivityTracker(this.state.session.id, this.onTrackActivity)
        this.activityTracker.start()
      } else {
        log.info('no session, not tracking activity')
      }
    }
  }

  componentWillUnmount() {
    this.activityTracker && this.activityTracker.stop()
    delete this.activityTracker
  }

  render(): JSX.Element {
    const {classes} = this.props
    const {reset, session, dataProviderFactory, dataProviderFactories} = this.state

    return (
      <div className={classes!.root}>
        {dataProviderFactories.length && (
          <React.Fragment>
            <SessionPicker
              onSessionSelected={this.onSessionSelected}
              session={session}
              dataProviderFactories={dataProviderFactories}
            />
            <div className="annotatorPane">
              {!reset && dataProviderFactory && (
                <Annotator
                  getAnnotationManagerRef={this.getAnnotationManagerRef}
                  dataProviderFactory={dataProviderFactory!}
                />
              )}
            </div>
          </React.Fragment>
        )}
      </div>
    )
  }
}

const _App = withStyles(styles)(App)
export {_App as App}

// TODO JOE restore the Font style
// function getAbsolutePackagePath(packageName: string): string {
//   // Based on https://stackoverflow.com/a/49455609/454780
//   return path.dirname(require.resolve(`${packageName}/package.json`))
// }

// const fontPath = path.resolve(getAbsolutePackagePath('@mapperai/mapper-themes'), 'dist', 'assets', 'fonts')
// const avenirFont = makeFontWithDefaultWeights(fontPath, 'AvenirNext')

// return type disabled here because it is dynamically generated by the call to createStyles.
// SO in this case we must hover on `styles` to see the return type.
// eslint-disable-next-line typescript/explicit-function-return-type
function styles(theme: Theme) {
  return createStyles({
    '@global': {
      // NOTE The array-variant of @font-face isn't typed by material-ui yet.
      // The array format is supported by the underlying JSS implementation.
      // '@font-face': ([...avenirFont] as unknown) as CSSProperties,
    },
    root: {
      ...FillWidth,
      ...FillHeight,
      '& > .annotatorPane': {
        ...PositionAbsolute,
        backgroundColor: theme.palette.primary['800'],
        top: SessionPickerHeight,
        bottom: 0,
        left: 0,
        right: 0,
      },
    },
  })
}
